import os
import shutil
import subprocess
import time
from app import create_app, db
from app.models import User, Department, UserRole, Resource, Attachment

def reset_database():
    """Reset migrations and reinitialize the database."""
    print("=== Database Reset Tool ===")
    
    # Create backup of database
    if os.path.exists('app.db'):
        print("Backing up database...")
        backup_name = f'app.db.backup-{int(time.time())}'
        shutil.copy('app.db', backup_name)
        print(f"Database backed up to {backup_name}")
    
    # Remove migrations folder if it exists
    if os.path.exists('migrations'):
        print("Removing old migrations folder...")
        shutil.rmtree('migrations')
        print("Migrations folder removed")
    
    app = create_app()
    with app.app_context():
        # Drop all tables
        print("Dropping all database tables...")
        db.drop_all()
        print("All tables dropped")
        
        # Create tables fresh
        print("Creating tables from models...")
        db.create_all()
        print("Database tables created")
        
        # Create initial departments
        print("Creating initial departments...")
        departments = [
            Department(name="Engineering", description="Software development and engineering"),
            Department(name="Marketing", description="Marketing and communications"),
            Department(name="Finance", description="Financial management and accounting"),
            Department(name="HR", description="Human resources and talent management"),
            Department(name="Operations", description="Day-to-day business operations")
        ]
        
        for dept in departments:
            db.session.add(dept)
        
        # Create admin user
        print("Creating admin user...")
        admin = User(username="admin", email="admin@example.com", role=UserRole.ADMIN)
        admin.set_password("admin123")
        db.session.add(admin)
        
        db.session.commit()
        print("Initial data created")
    
    # Initialize new migrations with correct parameters
    print("\nInitializing new migrations...")
    subprocess.run(["flask", "db", "init"], check=True)
    
    # Modify the env.py file to avoid dependency issues
    try:
        env_path = os.path.join('migrations', 'env.py')
        with open(env_path, 'r') as file:
            env_content = file.read()
        
        # Add configuration to ignore checking existing tables
        if 'context.configure(' in env_content:
            modified_content = env_content.replace(
                'context.configure(',
                'context.configure(compare_type=True, render_as_batch=True, '
            )
            with open(env_path, 'w') as file:
                file.write(modified_content)
            print("Modified migrations/env.py to improve compatibility")
    except Exception as e:
        print(f"Warning: Could not modify env.py: {str(e)}")
    
    # Create initial migration (with --rev-id to specify a new base revision)
    print("\nCreating initial migration...")
    try:
        result = subprocess.run(
            ["flask", "db", "migrate", "--rev-id=initial", "-m", "Initial migration"],
            check=True,
            capture_output=True,
            text=True
        )
        print(result.stdout)
    except subprocess.CalledProcessError as e:
        print(f"Error during migration: {e}")
        print(e.stdout if hasattr(e, 'stdout') else "")
        print(e.stderr if hasattr(e, 'stderr') else "")
        
        # If normal migration fails, try with --autogenerate flag
        print("\nTrying alternative migration approach...")
        try:
            result = subprocess.run(
                ["flask", "db", "migrate", "--autogenerate", "-m", "Initial autogenerated migration"],
                check=True,
                capture_output=True,
                text=True
            )
            print(result.stdout)
        except subprocess.CalledProcessError as e2:
            print(f"Migration failed again: {e2}")
            print("Manual intervention required.")
            print("Please try running: flask db stamp head")
            print("Then run: flask db migrate")
            print("Then run: flask db upgrade")
            return
    
    # Apply migration
    print("\nApplying migration...")
    try:
        subprocess.run(["flask", "db", "upgrade"], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error during upgrade: {e}")
        print("Try running 'flask db stamp head' and then 'flask db upgrade'")
        return
    
    print("\n=== Database reset completed successfully ===")
    print("You can now log in with:")
    print("Username: admin")
    print("Password: admin123")

if __name__ == "__main__":
    reset_database()
